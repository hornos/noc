#!/usr/bin/env ruby
require 'gli'
#begin # XXX: Remove this begin/rescue before distributing your app
require 'noc'
#rescue LoadError
#  STDERR.puts "In development, you need to use `bundle exec bin/todo` to run your app"
#  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
#  STDERR.puts "Feel free to remove this message from bin/todo now"
#  exit 64
#end


CHEF=".chef"
KNIFE="knife.rb"
CHEF_KNIFE=File.join(CHEF, KNIFE)
VAGRANTFILE="Vagrantfile"
DATABAGS="data_bags"


include GLI::App

program_desc 'Describe your application here'

version Noc::VERSION

# desc 'Describe some switch here'
# switch [:s,:switch]

desc 'Cluster file'
default_value 'Clusterfile.yml'
arg_name 'CLUSTERFILE'
flag [:c,:clusterfile]


desc 'Scaffold the cluster'
arg_name 'options'
command :init do |c|

  c.action do |global_options,options,args|
    case args[0]

    when "users"
      users_dir = File.join(DATABAGS,"users")
      Dir.mkdir(users_dir) unless File.exists?(users_dir)

      $cluster[:users].each do |user|
        json = File.join( users_dir, user, ".json")
        raise "File exists #{json}" if File.exists?(json)

        key = File.join( users_dir, user, ".key" )
        raise "File exists #{key}" if File.exists?(key)

        system( "ssh-keygen -b 2048 -f #{key}" )
        pub = IO.read("#{key}.pub")
      end

    when "bags"
      %w[clusters users secrets].each do |b|
        system("knife data bag create #{b}")
      end

    when "vagrant"
      # create vagrantfile
      raise "File exists #{VAGRANTFILE}" if File.exists?(VAGRANTFILE)
      template = File.join(File.dirname(__FILE__), '..', 'templates', VAGRANTFILE + ".erb" )
      raise "Template not found: #{template}" if not File.exists?(template)

      File.open( VAGRANTFILE, 'w' ) do |f|
        f.write( Erubis::Eruby.new(File.new(template).read).result({:clusterfile => global_options[:clusterfile],
                                                            :cluster => $cluster}))
      end

    when nil
      raise "File exists #{CHEF_KNIFE}" if File.exists?(CHEF_KNIFE)
      raise "No knife section in cluster" if $cluster[:knife].nil?

      # create chef directory
      Dir.mkdir(CHEF) unless File.exists?(CHEF)
      # knife.rb template
      template = File.join(File.dirname(__FILE__), '..', 'templates', KNIFE + ".erb" )
      raise "Template not found: #{template}" if not File.exists?(template)
      # create knife.rb
      File.open( CHEF_KNIFE, 'w' ) do |f|
        f.write( Erubis::Eruby.new(File.new(template).read).result($cluster[:knife]) )
      end
      puts "#{CHEF_KNIFE}"
    end

    puts "init command ran"
  end
end

desc 'Download stuff'
arg_name 'COMMAND [options]'
command :download do |c|
  c.action do |global_options,options,args|
    case args[0]
    when 'books'
      $cluster[:cookbooks].each do |b|
        system("knife cookbook site install #{b}")
      end
    end
  end
end


desc 'Upload: cluster user(s) book(s) role(s) bag(s) env(s)'
arg_name 'COMMAND [options]'
command :upload do |c|
  c.desc 'force'
  c.switch :f

  c.action do |global_options,options,args|
    case args[0]
    when 'books'
      system("knife cookbook upload --all")
    when 'book'
      args.shift
      args.each do |a|
        system("knife cookbook upload #{a}")
      end

    when 'roles'
      Dir.glob("roles/*.rb").each do |f|
        system("knife role from file #{f}")
      end
    when 'role'
      system("knife role from file roles/#{args[1]}.rb")

    when 'envs'
      Dir.glob("environments/*.rb").each do |f|
        system("knife environment from file #{f}")
      end
    when 'env'
      system("knife environment from file environments/#{args[1]}.rb")

    when 'cluster'
      data_bag = File.join( "data_bags", "clusters", "#{$cluster[:id]}.json" )
      if File.exists?( data_bag ) then
        raise "Cluster found: #{data_bag}" if not options[:f]
      end
      data_bag_dir = File.join( "data_bags", "clusters" )
      Dir.mkdir(data_bag_dir) unless File.exists?(data_bag_dir)
      File.open( data_bag, 'w' ) do |f|
        f.write( $cluster.to_json )
      end
      system("knife data bag create clusters")
      system("knife data bag from file clusters #{$cluster[:id]}.json")

    when 'users'
      system("knife data bag create users")
      Dir.glob("data_bags/users/*.json").each do |f|
        system("knife data bag from file users #{File.basename(f)}")
      end
    when 'user'
      system("knife data bag from file users #{args[1]}.json")

    end

  end
end


desc 'Delete client from chef server'
arg_name 'COMMAND [options]'
command :delete do |c|
  c.action do |global_options,options,args|
    case args[0]
    when 'client'
      system("knife client delete #{args[1]}")
      system("knife node delete #{args[1]}")
    end
  end
end


pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only

  begin
    file = global[:clusterfile]
    $cluster = YAML.load_file file
  rescue Exception => e
    STDERR.puts e.message
    # STDERR.puts "ERROR: No infrastructure .yml file provided."
    exit(-1)
  end

  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
